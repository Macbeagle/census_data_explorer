SA2 <- data %>% select(SA2_MAINCODE_2016, SA2_5DIGITCODE_2016, SA2_NAME_2016, SA3_CODE_2016)
SA3 <- data %>% select(SA3_CODE_2016, SA3_NAME_2016, SA4_CODE_2016, SA4_NAME_2016, GCCSA_CODE_2016, GCCSA_NAME_2016, STATE_CODE_2016)
SA4 <- data %>% select(SA4_CODE_2016, SA4_NAME_2016, GCCSA_CODE_2016, GCCSA_NAME_2016, STATE_CODE_2016)
GCCSA <- data %>% select(GCCSA_CODE_2016, GCCSA_NAME_2016, STATE_CODE_2016)
#get unique state code and name
State <- data %>% select(STATE_CODE_2016,STATE_NAME_2016)
return(list(Meshblock, SA1, SA2, SA3, SA4, GCCSA, State))
}
#apply read_data function to all states
states <- lapply(states, read_data)
#collate all the LGA dataframes into one
LGA <- bind_rows(LGAs) %>% distinct()
LGA <- LGA %>% select(LGA_CODE_2020, LGA_NAME_2020, MB_CODE_2016,STATE_CODE_2016)
#collate all the SA1,SA2,SA3,SA4,GCCSA and State dataframes into dataframes for each
#only get unique values
SA1 <- bind_rows(lapply(states, function(x) x[[2]])) %>% distinct()
SA2 <- bind_rows(lapply(states, function(x) x[[3]])) %>% distinct()
SA3 <- bind_rows(lapply(states, function(x) x[[4]])) %>% distinct()
SA4 <- bind_rows(lapply(states, function(x) x[[5]])) %>% distinct()
GCCSA <- bind_rows(lapply(states, function(x) x[[6]])) %>% distinct()
State <- bind_rows(lapply(states, function(x) x[[7]])) %>% distinct()
#distinct the other dataframes
SA1_UCL <- SA1_UCL %>% distinct()
SA2_SUA <- SA2_SUA %>% distinct()
SOSR <- SOSR %>% distinct()
#collate meshblock dataframes into one
Meshblock <- bind_rows(lapply(states, function(x) x[[1]]))
#add a Date column to all dataframes that has current Date
SA1$SA1_Date <- today()
SA2$SA2_Date <- today()
SA3$SA3_Date <- today()
SA4$SA4_Date <- today()
GCCSA$GCCSA_Date <- today()
State$State_Date <- today()
SA1_UCL$SA1_UCL_Date <- today()
SA2_SUA$SA2_SUA_Date <- today()
SOSR$SOSR_Date <- today()
Meshblock$Meshblock_Date <- today()
LGA$LGA_Date <- today()
#create a column in front for the ssl md5 hash called SA1_Key
SA1$SA1_Key <- openssl::md5(as.character(SA1$SA1_MAINCODE_2016))
SA2$SA2_Key <- openssl::md5(as.character(SA2$SA2_MAINCODE_2016))
SA3$SA3_Key <- openssl::md5(as.character(SA3$SA3_CODE_2016))
SA4$SA4_Key <- openssl::md5(as.character(SA4$SA4_CODE_2016))
GCCSA$GCCSA_Key <- openssl::md5(as.character(GCCSA$GCCSA_CODE_2016))
State$State_Key <- openssl::md5(as.character(State$STATE_CODE_2016))
SA1_UCL$SA1_UCL_Key <- openssl::md5(as.character(SA1_UCL$SA1_MAINCODE_2016))
SA2_SUA$SA2_SUA_Key <- openssl::md5(as.character(SA2_SUA$SA2_MAINCODE_2016))
SOSR$SOSR_Key <- openssl::md5(as.character(SOSR$SOSR_CODE_2016))
Meshblock$Meshblock_Key <- openssl::md5(as.character(Meshblock$MB_CODE_2016))
LGA$LGA_Key <- openssl::md5(as.character(LGA$LGA_CODE_2020))
SA1 <- SA1 %>% select(SA1_Key, everything())
SA2 <- SA2 %>% select(SA2_Key, everything())
SA3 <- SA3 %>% select(SA3_Key, everything())
SA4 <- SA4 %>% select(SA4_Key, everything())
GCCSA <- GCCSA %>% select(GCCSA_Key, everything())
State <- State %>% select(State_Key, everything())
SA1_UCL <- SA1_UCL %>% select(SA1_UCL_Key, everything())
SA2_SUA <- SA2_SUA %>% select(SA2_SUA_Key, everything())
SOSR <- SOSR %>% select(SOSR_Key, everything())
Meshblock <- Meshblock %>% select(Meshblock_Key, everything())
LGA <- LGA %>% select(LGA_Key, everything())
#write to CSV
write_csv(LGA, paste0(base_path, "Classifications/LOCATION_ASGS/Output/ASGS_LGA.csv"))
write_csv(SA1, paste0(base_path, "Classifications/LOCATION_ASGS/Output/ASGS_SA1.csv"))
write_csv(SA2, paste0(base_path, "Classifications/LOCATION_ASGS/Output/ASGS_SA2.csv"))
write_csv(SA3, paste0(base_path, "Classifications/LOCATION_ASGS/Output/ASGS_SA3.csv"))
write_csv(SA4, paste0(base_path, "Classifications/LOCATION_ASGS/Output/ASGS_SA4.csv"))
write_csv(GCCSA, paste0(base_path, "Classifications/LOCATION_ASGS/Output/ASGS_GCCSA.csv"))
write_csv(State, paste0(base_path, "Classifications/LOCATION_ASGS/Output/ASGS_State.csv"))
write_csv(SA1_UCL, paste0(base_path, "Classifications/LOCATION_ASGS/Output/ASGS_SA1_UCL.csv"))
write_csv(SA2_SUA, paste0(base_path, "Classifications/LOCATION_ASGS/Output/ASGS_SA2_SUA.csv"))
write_csv(SOSR, paste0(base_path, "Classifications/LOCATION_ASGS/Output/ASGS_SOSR.csv"))
write_csv(Meshblock, paste0(base_path, "Classifications/LOCATION_ASGS/Output/ASGS_Meshblock.csv"))
end_time <- Sys.time()
print("MB Task Complete")
print(paste0("Time taken: ", end_time - start_time))
}
standardize_MB("C:/Users/Josh/OneDrive/Documents/GIthub/abs/")
retrieve_Classifications <- function(base_path) {
start_time <- Sys.time()
library(readxl)
library(tidyverse)
library(openssl)
library(dplyr)
source(paste0(base_path, "/Classifications/DEMOGRAPHIC_ASCCEG/standardization_ASCCEG.R"))
source(paste0(base_path, "/Classifications/DEMOGRAPHIC_ASCRG/standardization_ASCRG.R"))
source(paste0(base_path, "/Classifications/DEMOGRAPHIC_ASCL/standardization_ASCL.R"))
source(paste0(base_path, "/Classifications/EDUCATION_ASCED/standardization_ASCED.R"))
source(paste0(base_path, "/Classifications/LOCATION_ASGS/standardization_ASGS.R"))
source(paste0(base_path, "/Classifications/LOCATION_SACC/standardization_SACC.R"))
source(paste0(base_path, "/Classifications/OCCUPATION_ANZSCO/standardization_ANZSRC.R"))
source(paste0(base_path, "/Classifications/RESEARCH_ANZSRC/standardization_ANZSRC.R"))
standardize_ASCCEG(base_path)
standardize_ASCRG(base_path)
standardize_ASCL(base_path)
standardize_ASCED(base_path)
standardize_ASGS(base_path)
standardize_SACC(base_path)
standardize_ANZCO(base_path)
standardize_ANZSRC(base_path)
end_time <- Sys.time()
print("All Classification Tasks Complete")
print(paste0("Time taken: ", end_time - start_time))
}
retrieve_Classifications("C:/Users/Josh/OneDrive/Documents/GIthub/abs/")
retrieve_Classifications <- function(base_path) {
start_time <- Sys.time()
library(readxl)
library(tidyverse)
library(openssl)
library(dplyr)
source(paste0(base_path, "/Classifications/DEMOGRAPHIC_ASCCEG/standardization_ASCCEG.R"))
source(paste0(base_path, "/Classifications/DEMOGRAPHIC_ASCRG/standardization_ASCRG.R"))
source(paste0(base_path, "/Classifications/DEMOGRAPHIC_ASCL/standardization_ASCL.R"))
source(paste0(base_path, "/Classifications/EDUCATION_ASCED/standardization_ASCED.R"))
source(paste0(base_path, "/Classifications/LOCATION_ASGS/standardization_ASGS.R"))
source(paste0(base_path, "/Classifications/LOCATION_SACC/standardization_SACC.R"))
source(paste0(base_path, "/Classifications/OCCUPATION_ANZSCO/standardization_ANZSRC.R"))
source(paste0(base_path, "/Classifications/RESEARCH_ANZSRC/standardization_ANZSRC.R"))
standardize_ASCCEG(base_path)
standardize_ASCRG(base_path)
standardize_ASCL(base_path)
standardize_ASCED(base_path)
standardize_ASGS(base_path)
standardize_SACC(base_path)
standardize_ANZCO(base_path)
standardize_ANZSRC(base_path)
end_time <- Sys.time()
print("All Classification Tasks Complete")
print(paste0("Time taken: ", end_time - start_time))
}
retrieve_Classifications("C:/Users/Josh/OneDrive/Documents/GIthub/abs/")
retrieve_Classifications <- function(base_path) {
start_time <- Sys.time()
library(readxl)
library(tidyverse)
library(openssl)
library(dplyr)
source(paste0(base_path, "/Classifications/DEMOGRAPHIC_ASCCEG/standardization_ASCCEG.R"))
source(paste0(base_path, "/Classifications/DEMOGRAPHIC_ASCRG/standardization_ASCRG.R"))
source(paste0(base_path, "/Classifications/DEMOGRAPHIC_ASCL/standardization_ASCL.R"))
source(paste0(base_path, "/Classifications/EDUCATION_ASCED/standardization_ASCED.R"))
source(paste0(base_path, "/Classifications/LOCATION_ASGS/standardization_ASGS.R"))
source(paste0(base_path, "/Classifications/LOCATION_SACC/standardization_SACC.R"))
source(paste0(base_path, "/Classifications/OCCUPATION_ANZSCO/standardization_ANZSCO.R"))
source(paste0(base_path, "/Classifications/RESEARCH_ANZSRC/standardization_ANZSRC.R"))
standardize_ASCCEG(base_path)
standardize_ASCRG(base_path)
standardize_ASCL(base_path)
standardize_ASCED(base_path)
standardize_ASGS(base_path)
standardize_SACC(base_path)
standardize_ANZCO(base_path)
standardize_ANZSRC(base_path)
end_time <- Sys.time()
print("All Classification Tasks Complete")
print(paste0("Time taken: ", end_time - start_time))
}
retrieve_Classifications("C:/Users/Josh/OneDrive/Documents/GIthub/abs/")
retrieve_Classifications <- function(base_path) {
start_time <- Sys.time()
library(readxl)
library(tidyverse)
library(openssl)
library(dplyr)
source(paste0(base_path, "/Classifications/DEMOGRAPHIC_ASCCEG/standardization_ASCCEG.R"))
source(paste0(base_path, "/Classifications/DEMOGRAPHIC_ASCRG/standardization_ASCRG.R"))
source(paste0(base_path, "/Classifications/DEMOGRAPHIC_ASCL/standardization_ASCL.R"))
source(paste0(base_path, "/Classifications/EDUCATION_ASCED/standardization_ASCED.R"))
source(paste0(base_path, "/Classifications/LOCATION_ASGS/standardization_ASGS.R"))
source(paste0(base_path, "/Classifications/LOCATION_SACC/standardization_SACC.R"))
source(paste0(base_path, "/Classifications/OCCUPATION_ANZSCO/standardization_ANZSCO.R"))
source(paste0(base_path, "/Classifications/RESEARCH_ANZSRC/standardization_ANZSRC.R"))
standardize_ASCCEG(base_path)
standardize_ASCRG(base_path)
standardize_ASCL(base_path)
standardize_ASCED(base_path)
standardize_ASGS(base_path)
standardize_SACC(base_path)
standardize_ANZCO(base_path)
standardize_ANZSRC(base_path)
end_time <- Sys.time()
print("All Classification Tasks Complete")
print(paste0("Time taken: ", end_time - start_time))
}
retrieve_Classifications("C:/Users/Josh/OneDrive/Documents/GIthub/abs/")
retrieve_Classifications <- function(base_path) {
start_time <- Sys.time()
library(readxl)
library(tidyverse)
library(openssl)
library(dplyr)
source(paste0(base_path, "/Classifications/DEMOGRAPHIC_ASCCEG/standardization_ASCCEG.R"))
source(paste0(base_path, "/Classifications/DEMOGRAPHIC_ASCRG/standardization_ASCRG.R"))
source(paste0(base_path, "/Classifications/DEMOGRAPHIC_ASCL/standardization_ASCL.R"))
source(paste0(base_path, "/Classifications/EDUCATION_ASCED/standardization_ASCED.R"))
source(paste0(base_path, "/Classifications/LOCATION_ASGS/standardization_ASGS.R"))
source(paste0(base_path, "/Classifications/LOCATION_SACC/standardization_SACC.R"))
source(paste0(base_path, "/Classifications/OCCUPATION_ANZSCO/standardization_ANZSCO.R"))
source(paste0(base_path, "/Classifications/RESEARCH_ANZSRC/standardization_ANZSRC.R"))
standardize_ASCCEG(base_path)
standardize_ASCRG(base_path)
standardize_ASCL(base_path)
standardize_ASCED(base_path)
standardize_ASGS(base_path)
standardize_SACC(base_path)
standardize_ANZCO(base_path)
standardize_ANZSRC(base_path)
end_time <- Sys.time()
print("All Classification Tasks Complete")
print(paste0("Time taken: ", end_time - start_time))
}
retrieve_Classifications("C:/Users/Josh/OneDrive/Documents/GIthub/abs/")
retrieve_Classifications <- function(base_path) {
start_time <- Sys.time()
if (!require("readxl")) {
install.packages("readxl")
}
if (!require("tidyverse")) {
install.packages("tidyverse")
}
if (!require("openssl")) {
install.packages("openssl")
}
if (!require("dplyr")) {
install.packages("dplyr")
}
library(readxl)
library(tidyverse)
library(openssl)
library(dplyr)
source(paste0(base_path, "/Classifications/DEMOGRAPHIC_ASCCEG/standardization_ASCCEG.R"))
source(paste0(base_path, "/Classifications/DEMOGRAPHIC_ASCRG/standardization_ASCRG.R"))
source(paste0(base_path, "/Classifications/DEMOGRAPHIC_ASCL/standardization_ASCL.R"))
source(paste0(base_path, "/Classifications/EDUCATION_ASCED/standardization_ASCED.R"))
source(paste0(base_path, "/Classifications/LOCATION_ASGS/standardization_ASGS.R"))
source(paste0(base_path, "/Classifications/LOCATION_SACC/standardization_SACC.R"))
source(paste0(base_path, "/Classifications/OCCUPATION_ANZSCO/standardization_ANZSCO.R"))
source(paste0(base_path, "/Classifications/RESEARCH_ANZSRC/standardization_ANZSRC.R"))
standardize_ASCCEG(base_path)
standardize_ASCRG(base_path)
standardize_ASCL(base_path)
standardize_ASCED(base_path)
standardize_ASGS(base_path)
standardize_SACC(base_path)
standardize_ANZSCO(base_path)
standardize_ANZSRC(base_path)
end_time <- Sys.time()
print("All Classification Tasks Complete")
print(paste0("Time taken: ", end_time - start_time))
}
retrieve_Classifications("C:/Users/Josh/OneDrive/Documents/GIthub/abs/")
retrieve_Classifications <- function(base_path) {
start_time <- Sys.time()
if (!require("readxl")) {
install.packages("readxl")
}
if (!require("tidyverse")) {
install.packages("tidyverse")
}
if (!require("openssl")) {
install.packages("openssl")
}
if (!require("dplyr")) {
install.packages("dplyr")
}
library(readxl)
library(tidyverse)
library(openssl)
library(dplyr)
source(paste0(base_path, "/Classifications/DEMOGRAPHIC_ASCCEG/standardization_ASCCEG.R"))
source(paste0(base_path, "/Classifications/DEMOGRAPHIC_ASCRG/standardization_ASCRG.R"))
source(paste0(base_path, "/Classifications/DEMOGRAPHIC_ASCL/standardization_ASCL.R"))
source(paste0(base_path, "/Classifications/EDUCATION_ASCED/standardization_ASCED.R"))
source(paste0(base_path, "/Classifications/LOCATION_ASGS/standardization_ASGS.R"))
source(paste0(base_path, "/Classifications/LOCATION_SACC/standardization_SACC.R"))
source(paste0(base_path, "/Classifications/OCCUPATION_ANZSCO/standardization_ANZSCO.R"))
source(paste0(base_path, "/Classifications/RESEARCH_ANZSRC/standardization_ANZSRC.R"))
standardize_ASCCEG(base_path)
standardize_ASCRG(base_path)
standardize_ASCL(base_path)
standardize_ASCED(base_path)
standardize_ASGS(base_path)
standardize_SACC(base_path)
standardize_ANZSCO(base_path)
standardize_ANZSRC(base_path)
end_time <- Sys.time()
print("All Classification Tasks Complete")
print(paste0("Time taken: ", end_time - start_time))
}
retrieve_Classifications("C:/Users/Josh/OneDrive/Documents/GIthub/abs/")
retrieve_Classifications <- function(base_path) {
start_time <- Sys.time()
if (!require("readxl")) {
install.packages("readxl")
}
if (!require("tidyverse")) {
install.packages("tidyverse")
}
if (!require("openssl")) {
install.packages("openssl")
}
if (!require("dplyr")) {
install.packages("dplyr")
}
library(readxl)
library(tidyverse)
library(openssl)
library(dplyr)
source(paste0(base_path, "/Classifications/DEMOGRAPHIC_ASCCEG/standardization_ASCCEG.R"))
source(paste0(base_path, "/Classifications/DEMOGRAPHIC_ASCRG/standardization_ASCRG.R"))
source(paste0(base_path, "/Classifications/DEMOGRAPHIC_ASCL/standardization_ASCL.R"))
source(paste0(base_path, "/Classifications/EDUCATION_ASCED/standardization_ASCED.R"))
source(paste0(base_path, "/Classifications/LOCATION_ASGS/standardization_ASGS.R"))
source(paste0(base_path, "/Classifications/LOCATION_SACC/standardization_SACC.R"))
source(paste0(base_path, "/Classifications/OCCUPATION_ANZSCO/standardization_ANZSCO.R"))
source(paste0(base_path, "/Classifications/RESEARCH_ANZSRC/standardization_ANZSRC.R"))
standardize_ASCCEG(base_path)
standardize_ASCRG(base_path)
standardize_ASCL(base_path)
standardize_ASCED(base_path)
standardize_ASGS(base_path)
standardize_SACC(base_path)
standardize_ANZSCO(base_path)
standardize_ANZSRC(base_path)
end_time <- Sys.time()
print("All Classification Tasks Complete")
print(paste0("Time taken: ", end_time - start_time))
}
retrieve_Classifications("C:/Users/Josh/OneDrive/Documents/GIthub/abs/")
setwd("~/")
if (!requireNamespace("rsdmx", quietly = TRUE)) {
install.packages("rsdmx")
}
if (!requireNamespace("uuid", quietly = TRUE)) {
install.packages("uuid")
}
if (!requireNamespace("encrypter", quietly = TRUE)) {
install.packages("encryptr")
}
if (!requireNamespace("dplyr", quietly = TRUE)) {
install.packages("dplyr")
}
#variables
providerId <- "ABS"
resource <- "data"
flowRef <- "ALC"
startDate <- NULL
endDate <- NULL
#functions
# Load the necessary library
library(rsdmx)
library(uuid)
library(encryptr)
library(dplyr)
#read sdmx func
read_sdmx_data <- function(providerId = "ABS", resource = "data", flowRef = "ALC", startDate = NULL, endDate = NULL) {
# Construct args for rsdmx
args <- list(providerId = providerId, resource = resource, flowRef = flowRef)
# Call readSDMX with the constructed argument list
sdmx <- do.call(readSDMX, args)
data_df <- as.data.frame(sdmx)
return(data_df)
}
# Example usage of the function
# data <- read_sdmx_data()
#read local data func
read_csv <- function(file_path) {
data_df <- read.csv(file_path, stringsAsFactors = FALSE)
return(data_df)
}
#Example usage
#df <- read_csv("C:/Users/User/Documents/data.csv")
read_sdmx_data(,,"ABS_C16_G56_LGA")
if (!requireNamespace("rsdmx", quietly = TRUE)) {
install.packages("rsdmx")
}
if (!requireNamespace("uuid", quietly = TRUE)) {
install.packages("uuid")
}
if (!requireNamespace("encrypter", quietly = TRUE)) {
install.packages("encryptr")
}
if (!requireNamespace("dplyr", quietly = TRUE)) {
install.packages("dplyr")
}
#variables
providerId <- "ABS"
resource <- "data"
flowRef <- "ALC"
startDate <- NULL
endDate <- NULL
#functions
# Load the necessary library
library(rsdmx)
library(uuid)
library(encryptr)
library(dplyr)
#read sdmx func
read_sdmx_data <- function(providerId = "ABS", resource = "data", flowRef = "ALC", startDate = NULL, endDate = NULL) {
# Construct args for rsdmx
args <- list(providerId = providerId, resource = resource, flowRef = flowRef)
# Call readSDMX with the constructed argument list
sdmx <- do.call(readSDMX, args)
data_df <- as.data.frame(sdmx)
return(data_df)
}
# Example usage of the function
# data <- read_sdmx_data()
#read local data func
read_csv <- function(file_path) {
data_df <- read.csv(file_path, stringsAsFactors = FALSE)
return(data_df)
}
#Example usage
#df <- read_csv("C:/Users/User/Documents/data.csv")
read_sdmx_data(,,"ABS_C16_G56_LGA")
read_sdmx_data(,,"ALC")
read_sdmx_data(,,"ABS_ANNUAL_ERP_ASGS2021")
read_sdmx_data(,,"ABORIGINAL_POP_PROJ")
if (!requireNamespace("rsdmx", quietly = TRUE)) {
install.packages("rsdmx")
}
if (!requireNamespace("uuid", quietly = TRUE)) {
install.packages("uuid")
}
if (!requireNamespace("encrypter", quietly = TRUE)) {
install.packages("encryptr")
}
if (!requireNamespace("dplyr", quietly = TRUE)) {
install.packages("dplyr")
}
#variables
providerId <- "ABS"
resource <- "data"
flowRef <- "ALC"
startDate <- NULL
endDate <- NULL
#functions
# Load the necessary library
library(rsdmx)
library(uuid)
library(encryptr)
library(dplyr)
#read sdmx func
read_sdmx_data <- function(providerId = "ABS", resource = "data", flowRef = "ALC", startDate = NULL, endDate = NULL) {
# Construct args for rsdmx
args <- list(providerId = providerId, resource = resource, flowRef = flowRef)
# Call readSDMX with the constructed argument list
sdmx <- do.call(readSDMX, args)
data_df <- as.data.frame(sdmx)
return(data_df)
}
# Example usage of the function
# data <- read_sdmx_data()
#read local data func
read_csv <- function(file_path) {
data_df <- read.csv(file_path, stringsAsFactors = FALSE)
return(data_df)
}
read_sdmx_data(,,"ABORIGINAL_POP_PROJ")
if (!requireNamespace("rsdmx", quietly = TRUE)) {
install.packages("rsdmx")
}
if (!requireNamespace("uuid", quietly = TRUE)) {
install.packages("uuid")
}
if (!requireNamespace("encrypter", quietly = TRUE)) {
install.packages("encryptr")
}
if (!requireNamespace("dplyr", quietly = TRUE)) {
install.packages("dplyr")
}
#variables
providerId <- "ABS"
resource <- "data"
flowRef <- "ALC"
startDate <- NULL
endDate <- NULL
#functions
# Load the necessary library
library(rsdmx)
library(uuid)
library(encryptr)
library(dplyr)
#read sdmx func
read_sdmx_data <- function(providerId = "ABS", resource = "data", flowRef = "ALC", startDate = NULL, endDate = NULL) {
# Construct args for rsdmx
args <- list(providerId = providerId, resource = resource, flowRef = flowRef)
# Call readSDMX with the constructed argument list
sdmx <- do.call(readSDMX, args)
data_df <- as.data.frame(sdmx)
return(data_df)
}
# Example usage of the function
# data <- read_sdmx_data()
#read local data func
read_csv <- function(file_path) {
data_df <- read.csv(file_path, stringsAsFactors = FALSE)
return(data_df)
}
read_sdmx_data(,,"ABORIGINAL_POP_PROJ")
data <- read_sdmx_data(,,"ABORIGINAL_POP_PROJ")
View(data)
install.packages("palmerpebnguins")
install.packages("palmerpenguins")
install.packages("tidyverse")
install.packages("quarto")
restart
setwd("C:/Users/Josh/Documents/R/abs_app")
shiny::runApp()
